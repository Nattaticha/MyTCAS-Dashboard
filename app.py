import dash
from dash import dcc, html, Input, Output, dash_table
import plotly.express as px
import plotly.graph_objects as go
import pandas as pd
import numpy as np

# ‡∏™‡∏£‡πâ‡∏≤‡∏á Dash app
app = dash.Dash(__name__)

# ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
def load_data():
    try:
        df = pd.read_csv('cost.csv')
        # ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        df.columns = df.columns.str.strip()
        df['‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢'] = df['‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢'].fillna('').str.strip()
        df['Keyword'] = df['Keyword'].fillna('').str.strip()
        df['‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢'] = pd.to_numeric(df['‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢'], errors='coerce').fillna(0)
        df['‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£'] = df['‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£'].fillna('').str.strip()
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ
        df['‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ'] = df['‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢'].apply(get_region)
        
        # ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢ > 0
        df = df[(df['‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢'] != '') & (df['‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢'] > 0)]
        
        return df
    except Exception as e:
        print(f"Error loading data: {e}")
        return pd.DataFrame()

def get_region(university_name):
    if pd.isna(university_name):
        return '‡∏†‡∏≤‡∏Ñ‡∏Å‡∏•‡∏≤‡∏á'
    
    university_name = str(university_name)
    if any(keyword in university_name for keyword in ['‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà', '‡πÅ‡∏°‡πà‡∏ü‡πâ‡∏≤‡∏´‡∏•‡∏ß‡∏á', '‡∏û‡∏∞‡πÄ‡∏¢‡∏≤', '‡∏ô‡πÄ‡∏£‡∏®‡∏ß‡∏£']):
        return '‡∏†‡∏≤‡∏Ñ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠'
    elif any(keyword in university_name for keyword in ['‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô', '‡∏™‡∏∏‡∏£‡∏ô‡∏≤‡∏£‡∏µ', '‡∏≠‡∏∏‡∏ö‡∏•‡∏£‡∏≤‡∏ä‡∏ò‡∏≤‡∏ô‡∏µ', '‡∏Å‡∏≤‡∏¨‡∏™‡∏¥‡∏ô‡∏ò‡∏∏‡πå', '‡∏ô‡∏Ñ‡∏£‡∏û‡∏ô‡∏°', '‡∏£‡∏≤‡∏ä‡∏°‡∏á‡∏Ñ‡∏•‡∏≠‡∏µ‡∏™‡∏≤‡∏ô']):
        return '‡∏†‡∏≤‡∏Ñ‡∏≠‡∏µ‡∏™‡∏≤‡∏ô'
    elif any(keyword in university_name for keyword in ['‡∏™‡∏á‡∏Ç‡∏•‡∏≤‡∏ô‡∏Ñ‡∏£‡∏¥‡∏ô‡∏ó‡∏£‡πå', '‡∏ß‡∏•‡∏±‡∏¢‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå', '‡∏ô‡∏£‡∏≤‡∏ò‡∏¥‡∏ß‡∏≤‡∏™‡∏£‡∏≤‡∏ä‡∏ô‡∏Ñ‡∏£‡∏¥‡∏ô‡∏ó‡∏£‡πå', '‡∏£‡∏≤‡∏ä‡∏°‡∏á‡∏Ñ‡∏•‡∏®‡∏£‡∏µ‡∏ß‡∏¥‡∏ä‡∏±‡∏¢']):
        return '‡∏†‡∏≤‡∏Ñ‡πÉ‡∏ï‡πâ'
    else:
        return '‡∏†‡∏≤‡∏Ñ‡∏Å‡∏•‡∏≤‡∏á'

# ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
df = load_data()

# ‡∏™‡∏£‡πâ‡∏≤‡∏á layout
app.layout = html.Div([
    # Header
    html.Div([
        html.H1("üìä Dashboard ‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£‡∏ß‡∏¥‡∏®‡∏ß‡∏Å‡∏£‡∏£‡∏°‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÅ‡∏•‡∏∞‡∏õ‡∏±‡∏ç‡∏ç‡∏≤‡∏õ‡∏£‡∏∞‡∏î‡∏¥‡∏©‡∏ê‡πå", 
                className="text-4xl font-bold text-center mb-2"),
        html.P("‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡πÄ‡∏ó‡∏≠‡∏°‡πÉ‡∏ô‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡∏ï‡πà‡∏≤‡∏á‡πÜ‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå TCAS",
               className="text-center text-gray-600 mb-8")
    ], className="text-center mb-8"),
    
    # Filters
    html.Div([
        html.H2("üîç ‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á", className="text-xl font-semibold mb-4"),
        html.Div([
            html.Div([
                html.Label("‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£", className="block text-sm font-medium mb-2"),
                dcc.Dropdown(
                    id='keyword-dropdown',
                    options=[{'label': '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î', 'value': 'all'}] + 
                           [{'label': k, 'value': k} for k in sorted(df['Keyword'].unique())],
                    value='all',
                    className="w-full"
                )
            ], className="md:col-span-1"),
            
            html.Div([
                html.Label("‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£", className="block text-sm font-medium mb-2"),
                dcc.Dropdown(
                    id='type-dropdown',
                    options=[{'label': '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î', 'value': 'all'}] + 
                           [{'label': t, 'value': t} for t in sorted(df['‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£'].unique())],
                    value='all',
                    className="w-full"
                )
            ], className="md:col-span-1"),
            
            html.Div([
                html.Label("‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ", className="block text-sm font-medium mb-2"),
                dcc.Dropdown(
                    id='region-dropdown',
                    options=[{'label': '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î', 'value': 'all'}] + 
                           [{'label': r, 'value': r} for r in sorted(df['‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ'].unique())],
                    value='all',
                    className="w-full"
                )
            ], className="md:col-span-1"),
        ], className="grid grid-cols-1 md:grid-cols-3 gap-4")
    ], className="bg-white rounded-lg shadow-lg p-6 mb-6"),
    
    # Statistics Cards
    html.Div([
        html.Div([
            html.Div(id="stat-count", className="text-3xl font-bold text-blue-600"),
            html.Div("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£", className="text-gray-600")
        ], className="bg-white rounded-lg shadow-lg p-6 text-center"),
        
        html.Div([
            html.Div(id="stat-average", className="text-3xl font-bold text-green-600"),
            html.Div("‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢", className="text-gray-600")
        ], className="bg-white rounded-lg shadow-lg p-6 text-center"),
        
        html.Div([
            html.Div(id="stat-min", className="text-3xl font-bold text-red-600"),
            html.Div("‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î", className="text-gray-600")
        ], className="bg-white rounded-lg shadow-lg p-6 text-center"),
        
        html.Div([
            html.Div(id="stat-max", className="text-3xl font-bold text-purple-600"),
            html.Div("‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î", className="text-gray-600")
        ], className="bg-white rounded-lg shadow-lg p-6 text-center"),
        
        html.Div([
            html.Div(id="stat-median", className="text-3xl font-bold text-orange-600"),
            html.Div("‡∏Ñ‡πà‡∏≤‡∏Å‡∏•‡∏≤‡∏á", className="text-gray-600")
        ], className="bg-white rounded-lg shadow-lg p-6 text-center"),
    ], className="grid grid-cols-1 md:grid-cols-5 gap-4 mb-6"),
    
    # Charts Grid
    html.Div([
        # Cost Range Distribution
        html.Div([
            html.H3("‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡∏Ç‡∏≠‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢", className="text-lg font-semibold mb-4"),
            html.Div([
                dcc.Graph(id='cost-range-chart', style={'height': '400px'})
            ], style={'height': '400px'})
        ], className="bg-white rounded-lg shadow-lg p-6"),
        
        # Course Type Distribution
        html.Div([
            html.H3("‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£", className="text-lg font-semibold mb-4"),
            html.Div([
                dcc.Graph(id='type-distribution-chart', style={'height': '400px'})
            ], style={'height': '400px'})
        ], className="bg-white rounded-lg shadow-lg p-6"),
    ], className="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6"),
    
    # Top Expensive Universities
    html.Div([
        html.H3("üèÜ ‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î (Top 10)", className="text-lg font-semibold mb-4"),
        html.Div(id='top-expensive-table')
    ], className="bg-white rounded-lg shadow-lg p-6 mb-6"),
    
    # Footer
    html.Div([
        html.Span(id="footer-text", className="text-gray-500 text-sm")
    ], className="text-center")
    
], className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 p-6 max-w-7xl mx-auto")

# Callback ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏° filter
@app.callback(
    [Output('stat-count', 'children'),
     Output('stat-average', 'children'),
     Output('stat-min', 'children'),
     Output('stat-max', 'children'),
     Output('stat-median', 'children'),
     Output('cost-range-chart', 'figure'),
     Output('type-distribution-chart', 'figure'),
     Output('top-expensive-table', 'children'),
     Output('footer-text', 'children')],
    [Input('keyword-dropdown', 'value'),
     Input('type-dropdown', 'value'),
     Input('region-dropdown', 'value')]
)
def update_dashboard(selected_keyword, selected_type, selected_region):
    # ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    filtered_df = df.copy()
    
    if selected_keyword != 'all':
        filtered_df = filtered_df[filtered_df['Keyword'] == selected_keyword]
    
    if selected_type != 'all':
        filtered_df = filtered_df[filtered_df['‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£'] == selected_type]
    
    if selected_region != 'all':
        filtered_df = filtered_df[filtered_df['‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ'] == selected_region]
    
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
    if len(filtered_df) == 0:
        stats = {'count': 0, 'average': 0, 'min': 0, 'max': 0, 'median': 0}
    else:
        costs = filtered_df['‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢'].values
        stats = {
            'count': len(filtered_df),
            'average': int(costs.mean()),
            'min': int(costs.min()),
            'max': int(costs.max()),
            'median': int(np.median(costs))
        }
    
    # ‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ï‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
    def format_currency(value):
        if value == 0:
            return '-'
        return f"‡∏ø{value:,}"
    
    stat_count = str(stats['count'])
    stat_average = format_currency(stats['average'])
    stat_min = format_currency(stats['min'])
    stat_max = format_currency(stats['max'])
    stat_median = format_currency(stats['median'])
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡∏Ç‡∏≠‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢
    cost_ranges = [
        {'name': '< 20,000', 'min': 0, 'max': 19999},
        {'name': '20,000-30,000', 'min': 20000, 'max': 30000},
        {'name': '30,001-50,000', 'min': 30001, 'max': 50000},
        {'name': '50,001-70,000', 'min': 50001, 'max': 70000},
        {'name': '> 70,000', 'min': 70001, 'max': float('inf')}
    ]
    
    range_data = []
    for range_info in cost_ranges:
        count = len(filtered_df[
            (filtered_df['‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢'] >= range_info['min']) & 
            (filtered_df['‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢'] <= range_info['max'])
        ])
        range_data.append({'name': range_info['name'], 'count': count})
    
    cost_range_fig = px.bar(
        pd.DataFrame(range_data),
        x='name', y='count',
        title="",
        labels={'name': '‡∏ä‡πà‡∏ß‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢', 'count': '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô'},
        color_discrete_sequence=['#FFD700']
    )
    cost_range_fig.update_layout(
        showlegend=False,
        height=400,
        margin=dict(l=50, r=50, t=50, b=100),
        xaxis_title="‡∏ä‡πà‡∏ß‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢",
        yaxis_title="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"
    )
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£
    if len(filtered_df) > 0:
        type_counts = filtered_df['‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£'].value_counts()
        type_distribution_fig = px.pie(
            values=type_counts.values,
            names=type_counts.index,
            title=""
        )
        type_distribution_fig.update_layout(
            height=400,
            margin=dict(l=50, r=50, t=50, b=50)
        )
    else:
        type_distribution_fig = px.pie(values=[], names=[], title="")
        type_distribution_fig.update_layout(
            height=400,
            margin=dict(l=50, r=50, t=50, b=50)
        )
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á Top 10
    if len(filtered_df) > 0:
        top_10 = filtered_df.nlargest(10, '‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢')
        
        table_data = []
        for i, (_, row) in enumerate(top_10.iterrows(), 1):
            table_data.append({
                '‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö': i,
                '‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢': row['‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢'][:50] + ('...' if len(row['‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢']) > 50 else ''),
                '‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£': row['Keyword'],
                '‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó': row['‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£'],
                '‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ': row['‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ'],
                '‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢': f"‡∏ø{row['‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢']:,}"
            })
        
        table = dash_table.DataTable(
            data=table_data,
            columns=[
                {'name': '‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö', 'id': '‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö'},
                {'name': '‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢', 'id': '‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢'},
                {'name': '‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£', 'id': '‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£'},
                {'name': '‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó', 'id': '‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó'},
                {'name': '‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ', 'id': '‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ'},
                {'name': '‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢', 'id': '‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢'}
            ],
            style_cell={'textAlign': 'left', 'padding': '10px'},
            style_header={'backgroundColor': 'rgb(230, 230, 230)', 'fontWeight': 'bold'},
            style_data_conditional=[
                {
                    'if': {'row_index': 'odd'},
                    'backgroundColor': 'rgb(248, 248, 248)'
                }
            ]
        )
    else:
        table = html.Div("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á", className="text-center text-gray-500")
    
    # Footer text
    footer_text = f"üìà Dashboard ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• {len(df)} ‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£ | ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á: {len(filtered_df)} ‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£"
    
    return (stat_count, stat_average, stat_min, stat_max, stat_median,
            cost_range_fig, type_distribution_fig, table, footer_text)

# ‡πÄ‡∏û‡∏¥‡πà‡∏° CSS ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Tailwind-like styling
app.index_string = '''
<!DOCTYPE html>
<html>
    <head>
        {%metas%}
        <title>{%title%}</title>
        {%favicon%}
        {%css%}
        <script src="https://cdn.tailwindcss.com"></script>
    </head>
    <body>
        {%app_entry%}
        <footer>
            {%config%}
            {%scripts%}
            {%renderer%}
        </footer>
    </body>
</html>
'''

if __name__ == '__main__':
    app.run(debug=True)
