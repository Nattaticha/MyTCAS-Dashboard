from playwright.sync_api import sync_playwright 
import pandas as pd
import time
import re

def scrape_tcas_data():
    with sync_playwright() as p:
        browser = p.chromium.launch(headless=False)
        page = browser.new_page()

        try:
            print("üîç ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå TCAS...")
            page.goto("https://www.mytcas.com/search", wait_until="networkidle")

            print("üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ '‡∏ß‡∏¥‡∏®‡∏ß‡∏Å‡∏£‡∏£‡∏°‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå'...")
            search_input = page.locator("input[type='text']")
            search_input.fill("‡∏ß‡∏¥‡∏®‡∏ß‡∏Å‡∏£‡∏£‡∏°‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå")
            search_input.press("Enter")

            print("‚è≥ ‡∏£‡∏≠‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤...")
            try:
                page.wait_for_selector("li, .card, .item, .program-card", timeout=15000)
            except:
                print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö selector ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏≠‡πÅ‡∏ó‡∏ô...")
                time.sleep(10)

            items = page.locator("li, .item, .card, .program-card").all()
            data = []

            print(f"üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {len(items)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")

            for i, item in enumerate(items):
                try:
                    item_text = item.inner_text()
                    if "‡∏ß‡∏¥‡∏®‡∏ß‡∏Å‡∏£‡∏£‡∏°‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå" in item_text or "‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå" in item_text:
                        program_name = "-"
                        university_name = "-"
                        fee_text = "-"

                        # --- ‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£ ---
                        program_selectors = [".program-name", ".course-name", "h3", "h4", ".title"]
                        for sel in program_selectors:
                            if item.locator(sel).count() > 0:
                                program_name = item.locator(sel).first.inner_text()
                                break
                        if program_name == "-":
                            for line in item_text.split('\n'):
                                if "‡∏ß‡∏¥‡∏®‡∏ß‡∏Å‡∏£‡∏£‡∏°" in line or "‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå" in line:
                                    program_name = line.strip()
                                    break

                        # --- ‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢ ---
                        uni_selectors = [".university-name", ".school-name", ".institution", ".uni"]
                        for sel in uni_selectors:
                            if item.locator(sel).count() > 0:
                                university_name = item.locator(sel).first.inner_text()
                                break
                        if university_name == "-":
                            for line in item_text.split("\n"):
                                if "‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢" in line:
                                    university_name = line.strip()
                                    break

                        # --- ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢ ---
                        try:
                            detail_section = item
                            dt_locator = detail_section.locator("xpath=.//dt[normalize-space(text())='‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢']")
                            if dt_locator.count() > 0:
                                fee_text = dt_locator.nth(0).evaluate("""
                                    el => {
                                        const dd = el.nextElementSibling;
                                        if (!dd) return "-";
                                        return dd.innerText || dd.textContent || "-";
                                    }
                                """)
                        except Exception as e:
                            print(f"‚ö†Ô∏è ‡∏Ç‡πâ‡∏≤‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ {i+1} (‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢) ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å: {e}")

                        # --- ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ---
                        if program_name != "-" or university_name != "-":
                            data.append({
                                "‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£": program_name.strip(),
                                "‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢": university_name.strip(),
                                "‡∏Ñ‡πà‡∏≤‡πÄ‡∏ó‡∏≠‡∏°": fee_text.strip()
                            })
                            print(f"üìù [{i+1}] {program_name[:40]} | {university_name[:30]} | {fee_text}")

                except Exception as e:
                    print(f"‚ö†Ô∏è ‡∏Ç‡πâ‡∏≤‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ {i+1} ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")

        finally:
            print("‚è≥ ‡∏£‡∏≠ 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏Å‡πà‡∏≠‡∏ô‡∏õ‡∏¥‡∏î‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå...")
            time.sleep(3)
            browser.close()

if __name__ == "__main__":
    scrape_tcas_data()
